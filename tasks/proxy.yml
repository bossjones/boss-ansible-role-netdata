---
- name: "create /etc/nginx/sites-available/netdata"
  copy:
    content: |

      log_format netdata '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $body_bytes_sent '
        '$request_length $request_time '
        '"$http_referer" "$http_user_agent"';

      access_log /var/log/nginx/netdata.access.log;
      error_log /var/log/nginx/netdata.error.log;

      upstream netdata {
          server 127.0.0.1:19999;
          keepalive 1024;
      }

      server {
          listen *:8081;
          # the virtual host name of this
          underscores_in_headers on;

          # max upload size
          client_max_body_size 75M;   # adjust to taste

          location / {
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Server $host;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_pass http://netdata;
              proxy_http_version 1.1;
              proxy_pass_request_headers on;
              proxy_set_header Connection "keep-alive";
              proxy_store off;
              gzip on;
              gzip_proxied any;
              gzip_types *;

          }

      }


    dest: "/etc/nginx/sites-available/netdata"
    owner: "root"
    group: "root"
    mode: 0644

- name: 'Create symlink for /etc/nginx/sites-enabled/netdata'
  file:
    src: "/etc/nginx/sites-available/netdata"
    dest: "/etc/nginx/sites-enabled/netdata"
    state: link


- name: 'delete symlink for /etc/nginx/sites-enabled/default'
  file:
    dest: "/etc/nginx/sites-enabled/default"
    state: absent

- name: "get line of global"
  shell: 'grep -n "\[global\]" /etc/netdata/netdata.conf | cut -d: -f1'
  become: yes
  register: global_linenumber

- name: "sed disconnect idle web clients after seconds = 3600"
  shell: |
    file /opt/netdata.lock
  register: netdata_lock
  become: yes

- name: "sed bind socket to IP = 127.0.0.1"
  shell: |
    sed -i '{{global_linenumber.stdout}}a\        bind socket to IP = 127.0.0.1' /etc/netdata/netdata.conf
  become: yes
  when: netdata_lock.stdout.find("No such file or directory") != -1

- name: "sed disconnect idle web clients after seconds = 3600"
  shell: |
    sed -i '{{global_linenumber.stdout}}a\        disconnect idle web clients after seconds = 3600' /etc/netdata/netdata.conf
  become: yes
  when: netdata_lock.stdout.find("No such file or directory") != -1

- name: "sed enable web responses gzip compression = no"
  shell: |
    sed -i '{{global_linenumber.stdout}}a\        enable web responses gzip compression = no' /etc/netdata/netdata.conf
  become: yes
  when: netdata_lock.stdout.find("No such file or directory") != -1

# - name: "file limits /etc/security/limits.d/nginx.conf"
#   copy:
#     content: |
#       nginx   soft    nofile  10000
#       nginx   hard    nofile  30000
#     dest: "/etc/security/limits.d/nginx.conf"
#     owner: "root"
#     group: "root"
#     mode: 0644

- name: "file limits /etc/security/limits.d/netdata.conf"
  copy:
    content: |
      netdata   soft    nofile  10000
      netdata   hard    nofile  30000
    dest: "/etc/security/limits.d/netdata.conf"
    owner: "root"
    group: "root"
    mode: 0644

- name: "Create directory: /etc/systemd/system/netdata.service.d"
  file:
    path: "/etc/systemd/system/netdata.service.d"
    state: directory
    owner: "root"
    group: "root"

- name: "Create directory: /etc/systemd/system/nginx.service.d"
  file:
    path: "/etc/systemd/system/nginx.service.d"
    state: directory
    owner: "root"
    group: "root"


# - name: "file limits /etc/systemd/system/nginx.service.d/limits.conf"
#   copy:
#     content: |
#       [Service]
#       LimitMEMLOCK=infinity
#       LimitNOFILE=30000
#       LimitNPROC=infinity
#       LimitCORE=infinity
#     dest: "/etc/systemd/system/nginx.service.d/limits.conf"
#     owner: "root"
#     group: "root"
#     mode: 0644

# - name: "file limits /etc/systemd/system/netdata.service.d/limits.conf"
#   copy:
#     content: |
#       [Service]
#       LimitMEMLOCK=infinity
#       LimitNOFILE=30000
#       LimitNPROC=infinity
#       LimitCORE=infinity
#     dest: "/etc/systemd/system/netdata.service.d/limits.conf"
#     owner: "root"
#     group: "root"
#     mode: 0644

# - name: updatedb
#   shell: 'updatedb'
#   become: yes
#   register: updatedb

- name: Add backend block
  blockinfile:
    path: /etc/netdata/netdata.conf
    block: |
      [backend]
              enabled = yes
              data source = average
              type = graphite
              destination = localhost:2003
              prefix = netdata
              hostname = {{boss__netdata__graphite_master_hostname}}
              update every = 10
              buffer on failures = 10
              timeout ms = 20000
              send charts matching = *
              send hosts matching = localhost *
              send names instead of ids = yes
  register: backend_block_added
  when: boss__netdata__netdata_graphite_backend_enabled is defined and boss__netdata__netdata_graphite_backend_enabled
  notify:
    - restart netdata

- name: start and enable netdata
  become: yes
  service: name=netdata state=restarted enabled=yes
  when: backend_block_added|changed



# --------------------------


# Make sure systemd template is up to date
- name: Ensure systemd directory exists
  file:
    path: "/etc/systemd/system"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Ensure /etc/default directory exists
  file:
    path: "/etc/default"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Generate /etc/default/netdata file
  template:
    src: "etc/default/netdata.j2"
    dest: "/etc/default/netdata"
    owner: "root"
    group: "root"
    mode: "0644"
  notify:
  - reload systemd netdata
  - restart netdata
  register: boss__netdata__netdata_etc_default_netdata

- name: Ensure /etc/systemd/system/netdata.service.d directory exists
  file:
    path: "/etc/systemd/system/netdata.service.d"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

# - name: Generate systemd unit file
#   template:
#     src: "etc/systemd/system/netdata.service.j2"
#     dest: "/etc/systemd/system/netdata.service"
#     owner: "root"
#     group: "root"
#     mode: "0644"
#   notify:
#   - reload systemd netdata
#   - restart netdata
#   register:  boss__netdata__netdata_register_systemd_service

- name: Configure custom systemd unit file override
  template:
    src: "etc/systemd/system/netdata.service.d/limits.conf.j2"
    dest: "/etc/systemd/system/netdata.service.d/limits.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify:
  - reload systemd netdata
  - restart netdata
  register: boss__netdata__netdata_register_limits_override

- name: Reload systemd daemon
  systemd:
    daemon_reload: true
  when: ( boss__netdata__netdata_register_conf_file|default() and
          boss__netdata__netdata_register_conf_file is changed)
         or (boss__netdata__netdata_register_limits_override|default() and
         boss__netdata__netdata_register_limits_override is changed)
  notify:
  - reload systemd netdata
  - restart netdata

# SOURCE: https://raymii.org/s/tutorials/Ansible_-_Only_if_a_file_exists_or_does_not_exist.html
- name: stat /etc/systemd/system/netdata.service
  stat: path=/etc/systemd/system/netdata.service
  register: netdata_systemd_unit_file
  changed_when: False

- name: dump /etc/systemd/system/netdata.service
  command: 'cat /etc/systemd/system/netdata.service'
  when: netdata_systemd_unit_file.stat.exists == True
  changed_when: False

- name: Ensure netdata is running and enabled on boot.
  service: "name=netdata state=started enabled=yes"

- name: reload systemd configuration
  become: yes
  command: systemctl daemon-reload

# Restart service and ensure it is enabled
- name: start and enable nginx
  become: yes
  service: name=nginx state=restarted enabled=yes

- name: start and enable netdata
  become: yes
  service: name=netdata state=restarted enabled=yes

# In ansible playbooks, handlers (such as to restart a service) normally happen at the end of a run. If you need ansible to run a handler between two tasks, there is "flush_handlers".
- name: flush handlers
  meta: flush_handlers
